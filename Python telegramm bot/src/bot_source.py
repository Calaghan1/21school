# @Spice_and_Wolf_bot
import telebot
from telebot import types
import urllib.request 
from random import choice
import random
from telebot.util import quick_markup
import load_data
import load_map
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
global markdown_stek
markdown_stek = []
token="5922115315:AAGc3rXIZJzxNYjKfin-uX6D4KUtJg7sU18"

def make_map(x, y):
    result = ''
    for i in range(0, 3):
        for j in range(0, 5):   
            if (i == 1 and j == 3):
                result += 'üõñ'
            elif (i == 2 and j == 2):
                result += 'üë©‚Äç‚öïÔ∏è'
            elif (i == 2 and j == 4):
                result += 'üíÄ'
            elif (i == 0 and j == 2):
                result += 'üíÄ'
            elif (i == x and y == j):
                result += 'üòõ'
            else:
                result += '‚ñ™Ô∏è'
        result += '\n'
    return result


global player
global enemy
global npc
player = load_data.Protagonist("player")

bot=telebot.TeleBot(token)

# def fight(call,enemy):

    # try:
    #     while True:
    #         if player.attack() < enemy.attack():
    #             player.take_hit()
    #         else:
    #             enemy.take_hit()
    # except:
    #     print(player.hp)
    #     print(enemy.hp)




@bot.message_handler(commands=['start'])
def start_message(message):
    # bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ")
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('/start', '/stop')
    user_markup.row('/–¢–µ–∫—É—â–∞—è_–ª–æ–∫–∞—Ü–∏—è', '/–ß—Ç–æ –≤–æ–∫—Ä—É–≥')
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ", reply_markup = user_markup)

    markdown_stek.append(user_markup)


@bot.callback_query_handler(func=lambda call: call.data == "right")
def callHandler1(call):
    loc = player.get_lication()
    if not loc[1] + 1 > 4:
        player.new_location((loc[0], loc[1] + 1))
        map = (make_map(loc[0],loc[1] + 1))
        markup = quick_markup({
        '‚û°' : {'callback_data': 'right'},
        '‚¨Ü': {'callback_data': 'up'},
        '‚¨á': {'callback_data': 'down'}
        ,'‚¨Ö': {'callback_data': 'left'}}, row_width=4)
        small_key = types.InlineKeyboardButton(text='Inventory', callback_data = 'Inventory')
        markup.add(small_key)
        try:
            bot.edit_message_text(map, call.message.chat.id, call.message.id, reply_markup = markup)
        except Exception as e:
            print(e)
        event_manager(call)



@bot.callback_query_handler(func=lambda call: call.data == "Inventory")
def callHandler_Inventory(call):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    keys = list(player.inventory.keys())
    for k in keys:
        bot.edit_message_text('/' + k, call.message.chat.id, call.message.id)
        





@bot.callback_query_handler(func=lambda call: call.data == "up")
def callHandler2(call):
    loc = player.get_lication()
    if not loc[0] - 1 < 0:
        player.new_location((loc[0] - 1, loc[1]))
        map = (make_map(loc[0] - 1,loc[1]))
        markup = quick_markup({
        '‚û°' : {'callback_data': 'right'},
        '‚¨Ü': {'callback_data': 'up'},
        '‚¨á': {'callback_data': 'down'}
        ,'‚¨Ö': {'callback_data': 'left'}}, row_width=4)
        small_key = types.InlineKeyboardButton(text='Inventory', callback_data = 'Inventory')
        markup.add(small_key)
        try:
            bot.edit_message_text(map, call.message.chat.id, call.message.id, reply_markup = markup)
        except Exception as e:
            print(e)
        event_manager(call)

@bot.callback_query_handler(func=lambda call: call.data == "down")
def callHandler3(call):
    loc = player.get_lication()
    if not(loc[0] + 1 > 2):
        player.new_location((loc[0] + 1, loc[1]))
        map = (make_map(loc[0] +  1,loc[1]))
        
        markup = quick_markup({
        '‚û°' : {'callback_data': 'right'},
        '‚¨Ü': {'callback_data': 'up'},
        '‚¨á': {'callback_data': 'down'}
        ,'‚¨Ö': {'callback_data': 'left'}}, row_width=4)
        small_key = types.InlineKeyboardButton(text='Inventory', callback_data = 'Inventory')
        markup.add(small_key)
        try:
            bot.edit_message_text(map, call.message.chat.id, call.message.id, reply_markup = markup)
        except Exception as e:
            print(e)
        event_manager(call)


@bot.callback_query_handler(func=lambda call: call.data == "left")
def callHandler4(call):
    loc = player.get_lication()
    if not loc[1] - 1 < 0:
        player.new_location((loc[0], loc[1] - 1))
        map = (make_map(loc[0],loc[1] - 1))
        markup = quick_markup({
        '‚û°' : {'callback_data': 'right'},
        '‚¨Ü': {'callback_data': 'up'},
        '‚¨á': {'callback_data': 'down'}
        ,'‚¨Ö': {'callback_data': 'left'}}, row_width=4)
        small_key = types.InlineKeyboardButton(text='Inventory', callback_data = 'Inventory')
        markup.add(small_key)
        try:
            bot.edit_message_text(map, call.message.chat.id, call.message.id, reply_markup = markup)
        except Exception as e:
            print(e)
        event_manager(call)

    

@bot.message_handler(commands=['stop'])
def start_message(massage):
    hide_markup = telebot.types.ReplyKeyboardRemove(True)
    bot.send_message(massage.from_user.id, '...', reply_markup = hide_markup)



def walk_map(massage):
    loc = player.get_lication()
    map = (make_map(loc[0],loc[1]))
    markup = quick_markup({
    '‚û°' : {'callback_data': 'right'},
    '‚¨Ü': {'callback_data': 'up'},
    '‚¨á': {'callback_data': 'down'}
    ,'‚¨Ö': {'callback_data': 'left'}}, row_width=4)
    small_key = types.InlineKeyboardButton(text='Inventory', callback_data = 'Inventory')
    markup.add(small_key)
    bot.send_message(massage.from_user.id, map, reply_markup = markup)

@bot.message_handler(commands=['–¢–µ–∫—É—â–∞—è_–ª–æ–∫–∞—Ü–∏—è'])
def where_am_i(massage):
    loc = player.get_lication()
    loc_disc = load_map.load_locations(loc)
    if loc_disc:
        mess = loc_disc.get("description")
        print("mess")
    else:
        mess = '–ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–æ –¥–µ—Ä–∂–∏ —É—Ö–æ –≤ –æ—Å—Ç—Ä–æ'
    bot.send_message(massage.from_user.id, mess)
    walk_map(massage)


@bot.message_handler(commands=['<--'])
def go_back(massage):
    markdown_stek.pop()
    bot.send_message(massage.from_user.id, '–ó–∞–∫—Ä—ã–ª', reply_markup = markdown_stek[-1])
    
# @bot.callback_query_handler(func=lambda call: call.data == "event")
def event_manager(call):
    loc = player.get_lication()
    # if (random.randrange(0, 10) < 2):
    #     enemy = get_random_enemy()
    #     fight(enemy)
    if (loc[0] == 2 and loc[1] == 4) or (loc[0] == 0 and loc[1] == 2):
        global enemy 
        enemy = load_data.Enemy()
        fight_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        fight_markup.row('/–°—Ä–∞–∂–∞—Ç—å—Å—è!','/–ë–µ–∂–∞—Ç—å!')
        fight_markup.row('/–ò–¥—Ç–∏_–¥–∞–ª—å—à–µ', '/–û—Å—Ç–∞—Ç—å—Å—è')
        bot.send_message(call.message.chat.id,'–í–∞—Å –∞—Ç–∞–∫—É–µ—Ç ' + enemy.name + ' ! –ë–µ–∂–∞—Ç—å –∏–ª–∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è?', reply_markup = fight_markup)
    event_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    event_markup.row('/start', '/stop')
    event_markup.row('/–ò–¥—Ç–∏_–¥–∞–ª—å—à–µ', '/–û—Å—Ç–∞—Ç—å—Å—è')
    if loc[0] == 1 and loc[1] == 3:
        event_markup.row('/–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–∫—Å–∏—Ä —É –±–∞—Ä–º–µ–Ω–∞')
        bot.send_message(call.message.chat.id,'–í', reply_markup = event_markup)
    if loc[0] == 2 and loc[1] == 2:
        event_markup.row('/–ü–æ–≥–æ—Ä–∏—Ç—å_—Å_–≤—Ä–∞—á–æ–º')
        global npc
        npc = load_data.NPC("id_2")
        bot.send_message(call.message.chat.id,'–¢—ã —É –≤—Ä–∞—á–∞ –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', reply_markup = event_markup)
        player.hp += 5
    
@bot.message_handler(commands=['Heal_water'])
def doc_talk(massage):
    if player.inventory["Heal_water"] > 0:
        player.hp += 2
        bot.send_message(massage.chat.id,'–ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ -' + str(player.hp))
        player.inventory["Heal_water"] -= 1
    else:
        bot.send_message(massage.chat.id,'–î–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ -' + str(player.hp))

@bot.message_handler(commands=['–ü–æ–≥–æ—Ä–∏—Ç—å_—Å_–≤—Ä–∞—á–æ–º'])
def doc_talk(massage):
    print("SDd")
    bot.send_message(massage.chat.id, player.talk_to(npc))
    if npc.status == 2:
        bot.send_message(massage.chat.id, "–í—Ä–∞—á –¥–∞–ª –≤–∞–º 1 Heal_water")
        player.take(npc.item)

@bot.message_handler(commands=['–°—Ä–∞–∂–∞—Ç—å—Å—è!'])
def fight(massage):
    try:
        if enemy.hp > 0:
            bot.send_message(massage.chat.id,'–¢—ã –Ω–∞–Ω–æ—Å–∏—à—å —É–¥–∞—Ä')
            enemy.take_hit(player.attack())
            player.take_hit(enemy.attack())
            bot.send_message(massage.chat.id,'–ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ -' + str(player.hp))
            bot.send_message(massage.chat.id,'–ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞ -' + str(enemy.hp))
        else:
            bot.send_message(massage.chat.id,'–¢—ã –æ–¥–µ—Ä–∂–∞–ª –≤–≤–µ—Ä—Ö')
            player.advance_strength()
            player.advance_craft()
            bot.send_message(massage.chat.id,'–°–∏–ª–∞ + 1 –ö—Ä–∞—Ñ—Ç + 1')
            if player.strength > 5:
                finish(massage)
    except:
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('/start', '/stop')
        user_markup.row('/–¢–µ–∫—É—â–∞—è_–ª–æ–∫–∞—Ü–∏—è', '/–ß—Ç–æ –≤–æ–∫—Ä—É–≥')
        bot.send_message(massage.from_user.id, "–í—ã –º–µ—Ä—Ç–≤—ã ", reply_markup = user_markup)

def finish(massage):
    finish_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    finish_markup.row('/start')
    bot.send_message(massage.chat.id,'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã!', reply_markup = finish_markup)
   
    



@bot.message_handler(commands=['–ò–¥—Ç–∏_–¥–∞–ª—å—à–µ'])
def go_back(massage):
    walk_map(massage)

bot.infinity_polling()


